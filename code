#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <time.h>
#include <cstdlib>
#include "glut.h"

using namespace std;

// Прототипы глобальных функций

void RenderScene(void);
void SetupRC(void);
void ChangeSize(int, int);
void TimerFunction(int);
void keyboardFunc(unsigned char, int, int);

const int COUNTB = 10;
double R = 10, step, alpha;
bool flag = 0;
int i1 = 0;
double ArrBall[COUNTB][5];
double Arr[COUNTB];

double delte_t = 0.001;

struct point
{
	double x, y;
};

point Myfunc(point p)
{
	point new_p;
	new_p.x = delte_t * (2 * p.x + 7 * p.y) + p.x;
	new_p.y = delte_t * (6 * p.x - 3 * p.y) + p.y;
	return new_p;
}

vector<vector<point>> criv(100);
GLfloat windowWidth = 10;
GLfloat windowHeight = 10;

void DrawRect(float x1, float y1, float x2, float y2, int Fillflag)
{
	glBegin(Fillflag ? GL_QUADS : GL_LINE_LOOP);
	glVertex2f(x1, y1);
	glVertex2f(x2, y1);
	glVertex2f(x2, y2);
	glVertex2f(x1, y2);
	glEnd();
}

void DrawLine(float x1, float y1, float x2, float y2)
{
	glBegin(GL_LINES);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glEnd();
}

void DrawCircle(float x, float y, float R, int FillFlag)
{
	int N = 360;
	glBegin(FillFlag ? GL_TRIANGLE_FAN : GL_LINE_LOOP);
	for (int i = 1; i <= N; i++)
	{
		glVertex2f(x + R * cos(2 * 3.14 / N * i), y + R * sin(2 * 3.14 / N * i));
	}
	glEnd();
}

void main(int argc, char* argv[])
{
	srand(time(NULL));

	for (int i = 0; i < criv.size(); i++)
	{
		point p;
		p.x = -windowWidth + rand() % (2 * (int)windowWidth);
		p.y = -windowHeight + rand() % (2 * (int)windowHeight);
		criv[i].push_back(p);
	}

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(600, 600);
	glutCreateWindow("Bounce");
	glutDisplayFunc(RenderScene);
	glutReshapeFunc(ChangeSize);
	glutKeyboardFunc(keyboardFunc);
	glutTimerFunc(10, TimerFunction, 1);
	SetupRC();
	glutMainLoop();
}

void RenderScene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	for (int i = 0; i < criv.size(); i++)
	{
		for (int j = 0; j + 1 < criv[i].size(); j++)
		{
			glColor3f(0.0f, 0.0f, 0.0f);
			DrawLine((float)criv[i][j].x, (float)criv[i][j].y, (float)criv[i][j + 1].x, (float)criv[i][j + 1].y);
		}
	}
	glutSwapBuffers();
}

void TimerFunction(int value)
{
	if (flag)
	{
		for (int i = 0; i < criv.size(); i++)
		{
			point new_p = Myfunc(criv[i][criv[i].size() - 1]);
			criv[i].push_back(new_p);
		}
	}
	glutPostRedisplay();
	glutTimerFunc(10, TimerFunction, 1);
}

void SetupRC(void)
{
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
}

void ChangeSize(int width, int height)
{
	GLfloat aspectRatio;
	if (height == 0)
	{
		height = 1;
	}
	if (width == 0)
	{
		width = 1;
	}
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	aspectRatio = (GLfloat)width / (GLfloat)height;
	if (width <= height)
	{
		windowWidth = 100;
		windowHeight = 100 / aspectRatio;
		glOrtho(-100, 100, -windowHeight, windowHeight, 1, -1);
	}
	else
	{
		windowWidth = 100 * aspectRatio;
		windowHeight = 100;
		glOrtho(-windowWidth, windowWidth, -100, 100, 1, -1);
	}
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboardFunc(unsigned char key, int x, int y)
{
	if (key == 27)
	{
		exit(0);
	}
	if ((key == ' ') && !flag)
	{
		step = 0.5;
		flag = true;
	}
}












